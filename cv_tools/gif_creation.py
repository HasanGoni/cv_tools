# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_gif_creation.ipynb.

# %% auto 0
__all__ = ['create_and_show_plot', 'check_and_install_recorder', 'record_with_peek', 'record_with_screentogif', 'record_screen']

# %% ../nbs/05_gif_creation.ipynb 3
import pyautogui
import time
import subprocess
import matplotlib.pyplot as plt
import numpy as np
from platform import system
import sys
import os
from nbdev.showdoc import show_doc
from fastcore.imports import *

# %% ../nbs/05_gif_creation.ipynb 4
def create_and_show_plot():
    x = np.linspace(0, 10, 100)
    y = np.sin(x)
    plt.plot(x, y)
    plt.title("Sine Wave")
    plt.xlabel("X")
    plt.ylabel("Y")
    plt.show(block=False)  # non-blocking display

# %% ../nbs/05_gif_creation.ipynb 5
def check_and_install_recorder():
    ' Checking whether Peek or ScreenToGif is installed and returning the name of the installed recorder'
    system = system()
    if system == "Linux":
        try:
            subprocess.run(["peek", "--version"], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            return "peek"
        except subprocess.CalledProcessError:
            print("Peek is not installed. Please install it using the following commands:")
            print("sudo add-apt-repository ppa:peek-developers/stable")
            print("sudo apt update")
            print("sudo apt install peek")
            sys.exit(1)
    elif system == "Windows":
        try:
            subprocess.run(["where", "screentogif"], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            return "screentogif"
        except subprocess.CalledProcessError:
            print("ScreenToGif is not installed. Please download and install it from:")
            print("https://www.screentogif.com/")
            print("After installation, make sure it's added to your system PATH.")
            sys.exit(1)
    else:
        print(f"Unsupported operating system: {system}")
        sys.exit(1)

# %% ../nbs/05_gif_creation.ipynb 7
def record_with_peek(
        script_name:str,  # Name of the Python script to be executed
        duration:int, # Duration of the recording
        output_name:str # Name of the output file
        ):
    'Recording the execution of a Python script using Peek'
    peek_process = subprocess.Popen(["peek"])
    time.sleep(2)

    pyautogui.click(x=100, y=100)  # Start recording
    
    subprocess.Popen(["python3", script_name])
    
    time.sleep(duration)

    pyautogui.click(x=100, y=100)  # Stop recording
    
    pyautogui.click(x=150, y=100)  # Save recording
    time.sleep(1)
    pyautogui.write(output_name)
    pyautogui.press('enter')

    peek_process.terminate()

    print(f"Recording saved as {output_name}")

# %% ../nbs/05_gif_creation.ipynb 9
def record_with_screentogif(
        script_name:str,# Name of the Python script to be executed 
        duration:int, # Duration of the recording 
        output_name:str# Name of the output file
        ):
    screentogif_path = "C:\\Program Files\\ScreenToGif\\ScreenToGif.exe"  # Adjust if needed
    
    subprocess.Popen([screentogif_path])
    time.sleep(2)

    pyautogui.hotkey('ctrl', 'shift', 'r')  # Start recording
    
    subprocess.Popen(["python", script_name])
    
    time.sleep(duration)

    pyautogui.hotkey('ctrl', 'shift', 'r')  # Stop recording
    
    pyautogui.click(x=100, y=100)  # Click save button (adjust coordinates)
    time.sleep(1)
    pyautogui.write(output_name)
    pyautogui.press('enter')

    print(f"Recording saved as {output_name}")

# %% ../nbs/05_gif_creation.ipynb 10
def record_screen(
        script_name:str, 
        duration:int=10, 
        output_name:str="output.gif"
        )->None:
    'Record Screen'
    if not os.path.exists(script_name):
        print(f"Error: Script '{script_name}' not found.")
        return

    recorder = check_and_install_recorder()

    if recorder == "peek":
        record_with_peek(script_name, duration, output_name)
    elif recorder == "screentogif":
        record_with_screentogif(script_name, duration, output_name)

