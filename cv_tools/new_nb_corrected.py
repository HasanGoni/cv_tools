# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_mknb.ipynb.

# %% auto 0
__all__ = ['new_nb']

# %% ../nbs/00_mknb.ipynb 3
import os
import re
from string import Template
from platform import system

from nbdev.config import get_config
from nbdev.sync import write_nb, mk_cell
from nbdev.doclinks import nbglob

from fastcore.xtras import Path

from fastcore.foundation import AttrDict, L
from fastcore.script import call_parse

# %% ../nbs/00_mknb.ipynb 4
_default_exp = Template("#| default_exp $export")
_exports="#| export\n import sys\nfrom pathlib import Path\n"
_title = Template("# $title\n")
_description = Template("> $description")
_export = "#| hide\nimport nbdev; nbdev.nbdev_export()"
_custom_lib = "#| export\ncustom_lib_path = Path(r'/home/ai_warstein/homes/goni/custom_libs')\nsys.path.append(str(custom_lib_path))\n"
_cv_tools= "#| export\nCV_TOOLS = Path(r'/home/ai_sintercra/homes/hasan/projects/git_data/cv_tools')\nsys.path.append(str(CV_TOOLS))\n"
_cv_tools_imports= "#| export\nfrom cv_tools.imports import *\nfrom cv_tools.core import *\nfrom cv_tools.data_processing.smb_tools import *\n"


def is_jupyterhub():
    return 'JUPYTERHUB_API_TOKEN' in os.environ
def check_os(path, unix_project_name='ai_sintercra'):
    if unix_project_name is not None:

        #new_path_ = path.replace('\\', '/')
        path_wo_d = Path(path).as_posix().split(':')[1:][0]
        nw_path = Path(f'/home/{unix_project_name}/{path_wo_d}')
        return nw_path
    else:return path
# %% ../nbs/00_mknb.ipynb 5
def _mk_nb(title,desc,exp=None, unix_project_name='ai_warstein'):
    nb = AttrDict(
        cells=L(),
        metadata={},
        nbformat=4,
        nbformat_minor=5
    )
    cfg = get_config()
    if exp is not None:
        nb.cells.append(mk_cell(exp))
    nb.cells.append(mk_cell(title+desc, "markdown"))
    nb.cells.append(mk_cell(_exports))
    nb.cells.append(mk_cell(_cv_tools))
    nb.cells.append(mk_cell(_custom_lib))
    nb.cells.append(mk_cell(_cv_tools_imports))
    current_path = cfg.nbs_path
    cu_wd = check_os(path=current_path, unix_project_name=unix_project_name)

    nb.cells.append(mk_cell(f"#| export\nCURRETNT_NB='{cu_wd}'"))
    nb.cells.append(mk_cell(""))
    if exp is not None:
        nb.cells.append(mk_cell(_export))
    nb.cells = list(nb.cells)
    # return dict(nb)
    return nb
#| export
def extract_prefix(name):
    match = re.match(r'^(\d+)_', name)
    if match:
        return match.group(1)
    return None

# %% ../nbs/00_mknb.ipynb 6
@call_parse
def create_nb(
    name:str, # The name of the newly created notebook
    module:str = None, # The name of the exported module it will generate
    title:str = None, # The title header in the notebook
    description:str = None, # The description that will go under the title header
    unix_project:str='ai_warstein' # Which unix project are you in, default ai_warstein
):
    "Creates a new base nbdev notebook named {nprefix}{nsuffix}_{name}.ipynb"
    cfg = get_config()
    nbs = nbglob(
        cfg.nbs_path,
        file_glob="*.ipynb",
        file_re="^[0-9]",
        skip_folder_re="^[_.]"
    )
    nbs = nbs.map(
        lambda x: Path(x).name.replace(".ipynb","")
    )
    nbs.sort()
    title = _title.substitute(title=title or "No Title")
    descrip = _description.substitute(description=description or "Fill me in!")
    if module is not None:
        module = _default_exp.substitute(export=module)
    if len(nbs) > 0:
        nums = nbs.map(
            lambda x: extract_prefix(x))
        prefix = sorted(nums)[-1]
        new_prefix = int(prefix) + 1

    else:
        new_prefix = '00'
    nbpath = cfg.nbs_path/f'{new_prefix}_{name}.ipynb'
    write_nb(_mk_nb(title, descrip, module, unix_project), nbpath)
