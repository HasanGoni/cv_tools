"""Samba related tools"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/09_data_processing.smb_tools.ipynb.

# %% auto 0
__all__ = ['CV_TOOLS', 'custom_lib_path', 'CURRETNT_NB', 'get_user_name_password', 'get_smb_filename', 'download_single_file']

# %% ../../nbs/09_data_processing.smb_tools.ipynb 3
import sys
from pathlib import Path


# %% ../../nbs/09_data_processing.smb_tools.ipynb 4
CV_TOOLS = Path(r'/home/ai_sintercra/homes/hasan/projects/git_data/cv_tools')
sys.path.append(str(CV_TOOLS))


# %% ../../nbs/09_data_processing.smb_tools.ipynb 5
custom_lib_path = Path(r'/home/ai_warstein/homes/goni/custom_libs')
sys.path.append(str(custom_lib_path))


# %% ../../nbs/09_data_processing.smb_tools.ipynb 6
from ..imports import *
from dotenv import load_dotenv
from smb.SMBConnection import SMBConnection

# %% ../../nbs/09_data_processing.smb_tools.ipynb 7
load_dotenv(dotenv_path=f'/home/ai_sintercra/homes/hasan/projects/git_data/cv_tools/cv_tools/.env')

# %% ../../nbs/09_data_processing.smb_tools.ipynb 8
def get_user_name_password(dotenv_path: str=None):
    load_dotenv(dotenv_path=dotenv_path)
    USERNAME = os.getenv('ServiceAccUsername')
    PASSWORD = os.getenv('ServiceAccPassword')
    return USERNAME, PASSWORD


# %% ../../nbs/09_data_processing.smb_tools.ipynb 9
def get_smb_filename(
    SERVER: str='MUCSDN57.eu.infineon.com',
    SHARE: str='earchive8$',
    path_: str=r"Business_Transfer\WAR",
    filter_ext: str=None,
    subfolder: str=None,
    target_path: str=None,
    USERNAME: str=None,
    PASSWORD: str=None,
    ) -> List[str]:


    conn = SMBConnection(
        username=USERNAME, 
        password=PASSWORD, 
        my_name=SHARE, 
        remote_name=SERVER, 
        use_ntlm_v2=True)
    conn.connect(SERVER, 139)

    try:
        # Corrected the path to match the expected SMB path format
        if subfolder:
            path_ = path_ + "\\" + subfolder
        file_list = conn.listPath(SHARE, path_)
        file_list = list(filter(lambda x: not(x.filename.startswith(".")), file_list))
        if filter_ext:
            file_list = list(filter(lambda x: x.filename.endswith(filter_ext), file_list))
        file_list_names = []
        for fn in file_list:
            ## Constructing the SMB path correctly for each file
            if subfolder:
                s_path = path_ + "\\" + subfolder + "\\" + fn.filename
                t_path = Path(target_path, subfolder, fn.filename)
            else:
                s_path = path_ + "\\" + fn.filename
                t_path = Path(target_path, fn.filename)
            f_sz = fn.file_size
            t_path.parent.mkdir(parents=True, exist_ok=True)
            if Path(t_path).is_file():
                if Path(t_path).stat().st_size != f_sz:
                    file_list_names.append(f"{s_path}|{t_path}")
            else:
                file_list_names.append(f"{s_path}|{t_path}")
        
        return file_list_names, file_list
    
    finally:
        conn.close()

# %% ../../nbs/09_data_processing.smb_tools.ipynb 10
def download_single_file(
    smb_filename: str, 
    SHARE: str,
    SERVER: str,
    USERNAME: str,
    PASSWORD: str) -> None:
    """
    Downloads a single file from SMB to a local directory.

    Args:
    - smb_filename (str): The SMB path of the file to download, followed by a "|" and the target local path.

    Example:
    >>> download_single_file("smb://path/to/file.txt|local/path/to/file.txt")
    """
    source, target_name = smb_filename.split("|")
    target_path = Path(target_name)
    target_path.parent.mkdir(parents=True, exist_ok=True)
    
    conn = SMBConnection(
        USERNAME, 
        PASSWORD, 
        remote_name=SERVER, 
        my_name=SHARE,
        use_ntlm_v2=True)
    conn.connect(SERVER, 139)

    try:
        with open(target_name, 'wb') as fp:
            conn.retrieveFile(SHARE, source, fp)
    finally:
        conn.close()

# %% ../../nbs/09_data_processing.smb_tools.ipynb 11
CURRETNT_NB='/home/ai_sintercra/homes/hasan/projects/git_data/cv_tools/nbs'
